;
; File generated by cc65 v 2.16 - Git e7137a2
;
	.fopt		compiler,"cc65 v 2.16 - Git e7137a2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "src\main.c", 2253, 1511748307
	.dbg		file, "src/lib/neslib.h", 8355, 1511504897
	.dbg		file, "src/soundsAndMusic/soundsAndMusic.h", 735, 1511504897
	.dbg		file, "src/gameConstants.h", 400, 1511616772
	.dbg		file, "src/titlePhase.h", 758, 1511707300
	.dbg		file, "src/nametables/title.h", 1585, 1511702491
	.dbg		file, "src/gamePhase.h", 5505, 1511767798
	.dbg		file, "src/nametables/game.h", 622, 1511749442
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "ppu_on_bg", "00", extern, "_ppu_on_bg"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "pad_trigger", "00", extern, "_pad_trigger"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_stop
	.import		_pad_trigger
	.import		_scroll
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.export		_palette
	.export		_pal_fade_to
	.export		_title
	.export		_titlePhase
	.export		_game
	.export		_block_metasprite
	.export		_updateListData
	.export		_gamePhase
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"

.segment	"RODATA"

_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$37
_title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C2
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$8C
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$96
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$2F
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$22
	.byte	$39
	.byte	$00
	.byte	$2C
	.byte	$2F
	.byte	$32
	.byte	$29
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$12
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$01
	.byte	$0F
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$85
	.byte	$A5
	.byte	$A5
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0C
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00
_game:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$81
	.byte	$4D
	.byte	$4E
	.byte	$49
	.byte	$4A
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$49
	.byte	$4A
	.byte	$4D
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$4B
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$27
	.byte	$2F
	.byte	$21
	.byte	$2C
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$4B
	.byte	$4C
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$0D
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$65
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$05
	.byte	$22
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$C4
	.byte	$F5
	.byte	$02
	.byte	$05
	.byte	$31
	.byte	$0C
	.byte	$0F
	.byte	$02
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$00
_block_metasprite:
	.byte	$00
	.byte	$EF
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$EF
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$F7
	.byte	$42
	.byte	$01
	.byte	$08
	.byte	$F7
	.byte	$43
	.byte	$01
	.byte	$80
_updateListData:
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_i16:
	.res	2,$00
_bright:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	23,$00
_blockX:
	.res	2,$00
_blockTileX:
	.res	1,$00
_blockTileY:
	.res	1,$00
_blockSpeed:
	.res	1,$00
_blockCount:
	.res	1,$00
_blockGroupWidth:
	.res	1,$00
_direction:
	.res	1,$00
_stackHeight:
	.res	1,$00
_isMoving:
	.res	1,$00
_minStackableX:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ pal_fade_to (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pal_fade_to: near

	.dbg	func, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg	sym, "to", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "src\main.c", 64
	jsr     pushax
;
; if (!to) music_stop();
;
	.dbg	line, "src\main.c", 65
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L001E
	jsr     _music_stop
;
; while (bright != to)
;
	.dbg	line, "src\main.c", 67
	jmp     L001E
;
; delay(4);
;
	.dbg	line, "src\main.c", 69
L001C:	lda     #$04
	jsr     _delay
;
; if (bright<to)  ++bright;
;
	.dbg	line, "src\main.c", 70
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L02E2
	inc     _bright
;
; else    --bright;
;
	.dbg	line, "src\main.c", 71
	jmp     L02E1
L02E2:	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "src\main.c", 72
L02E1:	lda     _bright
	jsr     _pal_bright
;
; while (bright != to)
;
	.dbg	line, "src\main.c", 67
L001E:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L001C
	cmp     _bright
	bne     L001C
;
; if (!bright)
;
	.dbg	line, "src\main.c", 75
	lda     _bright
	bne     L0029
;
; ppu_off();
;
	.dbg	line, "src\main.c", 77
	jsr     _ppu_off
;
; set_vram_update(NULL);
;
	.dbg	line, "src\main.c", 78
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; scroll(0,0);
;
	.dbg	line, "src\main.c", 79
	jsr     push0
	jsr     _scroll
;
; }
;
	.dbg	line, "src\main.c", 81
L0029:	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ titlePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_titlePhase: near

	.dbg	func, "titlePhase", "00", extern, "_titlePhase"

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "src/titlePhase.h", 18
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	.dbg	line, "src/titlePhase.h", 19
	lda     #<(_title)
	ldx     #>(_title)
	jsr     _vram_unrle
;
; pal_bg(palette);
;
	.dbg	line, "src/titlePhase.h", 22
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; ppu_on_bg();
;
	.dbg	line, "src/titlePhase.h", 25
	jsr     _ppu_on_bg
;
; if (pad_trigger(0))
;
	.dbg	line, "src/titlePhase.h", 30
	lda     #$00
L02E3:	jsr     _pad_trigger
	tax
	beq     L02E3
;
; pal_fade_to(0);
;
	.dbg	line, "src/titlePhase.h", 37
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ gamePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gamePhase: near

	.dbg	func, "gamePhase", "00", extern, "_gamePhase"

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 71
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "src/gamePhase.h", 74
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game);
;
	.dbg	line, "src/gamePhase.h", 75
	lda     #<(_game)
	ldx     #>(_game)
	jsr     _vram_unrle
;
; pal_bg(palette);
;
	.dbg	line, "src/gamePhase.h", 78
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette);
;
	.dbg	line, "src/gamePhase.h", 79
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_spr
;
; pal_bright(4);
;
	.dbg	line, "src/gamePhase.h", 82
	lda     #$04
	jsr     _pal_bright
;
; ppu_on_all();
;
	.dbg	line, "src/gamePhase.h", 83
	jsr     _ppu_on_all
;
; blockX = CENTER_X << FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 86
	ldx     #$08
	lda     #$00
	sta     _blockX
	stx     _blockX+1
;
; blockTileX = CENTER_X >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 87
	stx     _blockTileX
;
; blockTileY = BASE_Y >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 88
	lda     #$0D
	sta     _blockTileY
;
; blockSpeed = INIT_SPEED;
;
	.dbg	line, "src/gamePhase.h", 89
	lda     #$10
	sta     _blockSpeed
;
; blockCount = INIT_BLOCK_COUNT;
;
	.dbg	line, "src/gamePhase.h", 90
	lda     #$04
	sta     _blockCount
;
; blockGroupWidth = BLOCK_SIZE * blockCount;
;
	.dbg	line, "src/gamePhase.h", 91
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _blockGroupWidth
;
; direction = 1;
;
	.dbg	line, "src/gamePhase.h", 92
	lda     #$01
	sta     _direction
;
; stackHeight = 0;
;
	.dbg	line, "src/gamePhase.h", 93
	lda     #$00
	sta     _stackHeight
;
; minStackableX = 0;
;
	.dbg	line, "src/gamePhase.h", 94
	sta     _minStackableX
;
; isMoving = 1;
;
	.dbg	line, "src/gamePhase.h", 95
	lda     #$01
	sta     _isMoving
;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	.dbg	line, "src/gamePhase.h", 98
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     pushax
	lda     #<(_updateListData)
	ldx     #>(_updateListData)
	jsr     pushax
	ldx     #$00
	lda     #$17
	jsr     _memcpy
;
; set_vram_update(updateList);
;
	.dbg	line, "src/gamePhase.h", 99
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     _set_vram_update
;
; for (i = 0; i < blockCount; ++i)
;
	.dbg	line, "src/gamePhase.h", 104
L02EE:	lda     #$00
L02EF:	sta     _i
L02F0:	lda     _i
	cmp     _blockCount
	bcs     L0247
;
; oam_meta_spr((blockTileX + i) << TILE_SIZE_BIT,
;
	.dbg	line, "src/gamePhase.h", 106
	jsr     decsp3
	lda     _blockTileX
	clc
	adc     _i
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
;
; blockTileY << TILE_SIZE_BIT,
;
	.dbg	line, "src/gamePhase.h", 107
	lda     _blockTileY
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; i << 4,
;
	.dbg	line, "src/gamePhase.h", 108
	lda     _i
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; block_metasprite);
;
	.dbg	line, "src/gamePhase.h", 109
	lda     #<(_block_metasprite)
	ldx     #>(_block_metasprite)
	jsr     _oam_meta_spr
;
; for (i = 0; i < blockCount; ++i)
;
	.dbg	line, "src/gamePhase.h", 104
	inc     _i
	jmp     L02F0
;
; ppu_wait_frame();
;
	.dbg	line, "src/gamePhase.h", 113
L0247:	jsr     _ppu_wait_frame
;
; if (isMoving)
;
	.dbg	line, "src/gamePhase.h", 116
	lda     _isMoving
	beq     L0255
;
; if (direction)
;
	.dbg	line, "src/gamePhase.h", 119
	lda     _direction
	beq     L0257
;
; blockX += blockSpeed;
;
	.dbg	line, "src/gamePhase.h", 121
	lda     _blockSpeed
	clc
	adc     _blockX
	sta     _blockX
	lda     #$00
;
; else
;
	.dbg	line, "src/gamePhase.h", 123
	jmp     L02FC
;
; blockX -= blockSpeed;
;
	.dbg	line, "src/gamePhase.h", 125
L0257:	lda     _blockSpeed
	eor     #$FF
	sec
	adc     _blockX
	sta     _blockX
	lda     #$FF
L02FC:	adc     _blockX+1
	sta     _blockX+1
;
; blockTileX = blockX >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 129
L0255:	lda     _blockX+1
	sta     _blockTileX
;
; if ((((blockX & 0x00f0) >> FP_BITS)) >= 8)
;
	.dbg	line, "src/gamePhase.h", 130
	lda     _blockX
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$08
	bcc     L0261
;
; blockTileX += 1;
;
	.dbg	line, "src/gamePhase.h", 132
	inc     _blockTileX
;
; if ((blockX >> FP_BITS) <= SCREEN_MIN ||
;
	.dbg	line, "src/gamePhase.h", 136
L0261:	lda     _blockX
	ldx     _blockX+1
	jsr     shrax4
	cpx     #$00
	bne     L026B
	cmp     #$11
L026B:	bcc     L0269
;
; (blockX >> FP_BITS) >=
;
	.dbg	line, "src/gamePhase.h", 137
	lda     _blockX
	ldx     _blockX+1
	jsr     shrax4
;
; ((SCREEN_MAX - blockGroupWidth)))
;
	.dbg	line, "src/gamePhase.h", 138
	jsr     pushax
	lda     #$F0
	sec
	sbc     _blockGroupWidth
	jsr     tosicmp0
	bcc     L02FA
;
; direction ^= 1;
;
	.dbg	line, "src/gamePhase.h", 141
L0269:	lda     _direction
	eor     #$01
	sta     _direction
;
; if (pad_trigger(0))
;
	.dbg	line, "src/gamePhase.h", 145
L02FA:	lda     #$00
	jsr     _pad_trigger
	tax
	jeq     L02EF
;
; if (stackHeight < 1)
;
	.dbg	line, "src/gamePhase.h", 149
	ldx     #$00
	lda     _stackHeight
	bne     L02F2
;
; minStackableX = blockTileX;
;
	.dbg	line, "src/gamePhase.h", 151
	lda     _blockTileX
	sta     _minStackableX
;
; if (blockTileX != minStackableX)
;
	.dbg	line, "src/gamePhase.h", 155
L02F2:	lda     _minStackableX
	cmp     _blockTileX
	jeq     L02F6
;
; j = (blockTileX < minStackableX) ? (minStackableX - blockTileX)
;
	.dbg	line, "src/gamePhase.h", 157
	lda     _blockTileX
	cmp     _minStackableX
	bcs     L02F3
	lda     _minStackableX
	sec
	sbc     _blockTileX
;
; : (blockTileX - minStackableX);
;
	.dbg	line, "src/gamePhase.h", 158
	jmp     L02FD
L02F3:	lda     _blockTileX
	sec
	sbc     _minStackableX
L02FD:	sta     _j
;
; if (j > blockCount)
;
	.dbg	line, "src/gamePhase.h", 159
	sec
	sbc     _blockCount
	bcc     L02F4
	beq     L02F4
;
; j = blockCount;
;
	.dbg	line, "src/gamePhase.h", 161
	lda     _blockCount
	sta     _j
;
; for (i = 0; i < (j << 1); ++i)
;
	.dbg	line, "src/gamePhase.h", 165
L02F4:	stx     _i
L02F5:	lda     _i
	jsr     pusha0
	lda     _j
	asl     a
	bcc     L02E5
	ldx     #$01
L02E5:	jsr     tosicmp
	bcs     L0289
;
; updateList[2 + (blockCount << 1) - i] = 0x00;
;
	.dbg	line, "src/gamePhase.h", 167
	ldx     #$00
	lda     _blockCount
	asl     a
	bcc     L02EC
	inx
	clc
L02EC:	adc     #$02
	bcc     L0294
	inx
L0294:	sec
	sbc     _i
	pha
	txa
	sbc     #$00
	tax
	pla
	clc
	adc     #<(_updateList)
	sta     ptr1
	txa
	adc     #>(_updateList)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; updateList[13 + (blockCount << 1) - i] = 0x00;
;
	.dbg	line, "src/gamePhase.h", 168
	tax
	lda     _blockCount
	asl     a
	bcc     L02ED
	inx
	clc
L02ED:	adc     #$0D
	bcc     L0299
	inx
L0299:	sec
	sbc     _i
	pha
	txa
	sbc     #$00
	tax
	pla
	clc
	adc     #<(_updateList)
	sta     ptr1
	txa
	adc     #>(_updateList)
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; for (i = 0; i < (j << 1); ++i)
;
	.dbg	line, "src/gamePhase.h", 165
	inc     _i
	jmp     L02F5
;
; if (blockTileX > minStackableX)
;
	.dbg	line, "src/gamePhase.h", 173
L0289:	lda     _blockTileX
	sec
	sbc     _minStackableX
	bcc     L029B
	beq     L029B
;
; minStackableX = blockTileX;
;
	.dbg	line, "src/gamePhase.h", 175
	lda     _blockTileX
	sta     _minStackableX
;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 179
L029B:	jsr     _oam_clear
;
; blockCount -= j;
;
	.dbg	line, "src/gamePhase.h", 180
	lda     _j
	eor     #$FF
	sec
	adc     _blockCount
	sta     _blockCount
;
; blockGroupWidth = BLOCK_SIZE * blockCount;
;
	.dbg	line, "src/gamePhase.h", 181
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _blockGroupWidth
;
; if (blockCount == 0)
;
	.dbg	line, "src/gamePhase.h", 186
	ldx     #$00
L02F6:	lda     _blockCount
;
; break;
;
	.dbg	line, "src/gamePhase.h", 188
	bne     L02FE
;
; pal_fade_to(0);
;
	.dbg	line, "src/gamePhase.h", 220
	jmp     _pal_fade_to
;
; i16 = NTADR_A(minStackableX << 1, (blockTileY - 1) << 1);
;
	.dbg	line, "src/gamePhase.h", 193
L02FE:	lda     _blockTileY
	sec
	sbc     #$01
	bcs     L02AD
	dex
L02AD:	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _minStackableX
	asl     a
	bcc     L02E8
	inx
L02E8:	ora     ptr1
	sta     _i16
	txa
	ora     tmp1
	ora     #$20
	sta     _i16+1
;
; updateList[0] = MSB(i16) | NT_UPD_HORZ;
;
	.dbg	line, "src/gamePhase.h", 194
	ora     #$40
	sta     _updateList
;
; updateList[1] = LSB(i16);
;
	.dbg	line, "src/gamePhase.h", 195
	lda     _i16
	sta     _updateList+1
;
; i16 += 32;
;
	.dbg	line, "src/gamePhase.h", 196
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L02BD
	inc     _i16+1
;
; updateList[11] = MSB(i16) | NT_UPD_HORZ;
;
	.dbg	line, "src/gamePhase.h", 197
L02BD:	lda     _i16+1
	ora     #$40
	sta     _updateList+11
;
; updateList[12] = LSB(i16);
;
	.dbg	line, "src/gamePhase.h", 198
	lda     _i16
	sta     _updateList+12
;
; ++stackHeight;
;
	.dbg	line, "src/gamePhase.h", 201
	inc     _stackHeight
;
; if (stackHeight >= WIN_STACK_HEIGHT)
;
	.dbg	line, "src/gamePhase.h", 202
	lda     _stackHeight
	cmp     #$0A
	lda     #$00
	tax
;
; break;
;
	.dbg	line, "src/gamePhase.h", 204
	bcs     L02F8
;
; blockX = CENTER_X << FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 210
	ldx     #$08
	sta     _blockX
	stx     _blockX+1
;
; blockTileX = CENTER_X >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 211
	stx     _blockTileX
;
; blockTileY -= 1;
;
	.dbg	line, "src/gamePhase.h", 212
	dec     _blockTileY
;
; blockSpeed += INCREMENT_SPEED;
;
	.dbg	line, "src/gamePhase.h", 215
	lda     #$00
	clc
	adc     _blockSpeed
	sta     _blockSpeed
;
; while (1)
;
	.dbg	line, "src/gamePhase.h", 101
	jmp     L02EE
;
; pal_fade_to(0);
;
	.dbg	line, "src/gamePhase.h", 220
L02F8:	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; titlePhase();
;
	.dbg	line, "src\main.c", 92
L02D8:	jsr     _titlePhase
;
; pal_fade_to(0);
;
	.dbg	line, "src\main.c", 94
	ldx     #$00
	txa
	jsr     _pal_fade_to
;
; gamePhase();
;
	.dbg	line, "src\main.c", 96
	jsr     _gamePhase
;
; while (1) // Infinite loop
;
	.dbg	line, "src\main.c", 90
	jmp     L02D8
	.dbg	line

.endproc


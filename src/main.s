;
; File generated by cc65 v 2.16 - Git 820b4db
;
	.fopt		compiler,"cc65 v 2.16 - Git 820b4db"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "src\main.c", 2351, 1511772670
	.dbg		file, "src/lib/neslib.h", 8653, 1511772670
	.dbg		file, "src/soundsAndMusic/soundsAndMusic.h", 769, 1511772670
	.dbg		file, "src/gameConstants.h", 412, 1511772670
	.dbg		file, "src/titlePhase.h", 796, 1511772670
	.dbg		file, "src/nametables/title.h", 1585, 1511772670
	.dbg		file, "src/gamePhase.h", 5872, 1511773303
	.dbg		file, "src/nametables/game.h", 622, 1511772670
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "ppu_on_bg", "00", extern, "_ppu_on_bg"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "pad_trigger", "00", extern, "_pad_trigger"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_stop
	.import		_pad_trigger
	.import		_scroll
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.export		_palette
	.export		_pal_fade_to
	.export		_title
	.export		_titlePhase
	.export		_game
	.export		_block_metasprite
	.export		_updateListData
	.export		_gamePhase
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"

.segment	"RODATA"

_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$37
_title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C2
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$8C
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$96
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$2F
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$22
	.byte	$39
	.byte	$00
	.byte	$2C
	.byte	$2F
	.byte	$32
	.byte	$29
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$12
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$01
	.byte	$0F
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$85
	.byte	$A5
	.byte	$A5
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0C
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00
_game:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$81
	.byte	$4D
	.byte	$4E
	.byte	$49
	.byte	$4A
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$49
	.byte	$4A
	.byte	$4D
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$4B
	.byte	$4C
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$27
	.byte	$2F
	.byte	$21
	.byte	$2C
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$4B
	.byte	$4C
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$0D
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$65
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$05
	.byte	$22
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$C4
	.byte	$F5
	.byte	$02
	.byte	$05
	.byte	$31
	.byte	$0C
	.byte	$0F
	.byte	$02
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$00
_block_metasprite:
	.byte	$00
	.byte	$EF
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$EF
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$F7
	.byte	$42
	.byte	$01
	.byte	$08
	.byte	$F7
	.byte	$43
	.byte	$01
	.byte	$80
_updateListData:
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_i16:
	.res	2,$00
_bright:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	23,$00
_blockX:
	.res	2,$00
_blockTileX:
	.res	1,$00
_blockTileY:
	.res	1,$00
_blockSpeed:
	.res	1,$00
_blockCount:
	.res	1,$00
_direction:
	.res	1,$00
_stackHeight:
	.res	1,$00
_isMoving:
	.res	1,$00
_prevStartX:
	.res	1,$00
_prevBlockCount:
	.res	1,$00
_overlapStartX:
	.res	1,$00
_overlapBlockCount:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ pal_fade_to (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pal_fade_to: near

	.dbg	func, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg	sym, "to", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "src\main.c", 64
	jsr     pushax
;
; if (!to) music_stop();
;
	.dbg	line, "src\main.c", 65
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L001E
	jsr     _music_stop
;
; while (bright != to)
;
	.dbg	line, "src\main.c", 67
	jmp     L001E
;
; delay(4);
;
	.dbg	line, "src\main.c", 69
L001C:	lda     #$04
	jsr     _delay
;
; if (bright<to)  ++bright;
;
	.dbg	line, "src\main.c", 70
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L02EF
	inc     _bright
;
; else    --bright;
;
	.dbg	line, "src\main.c", 71
	jmp     L02EE
L02EF:	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "src\main.c", 72
L02EE:	lda     _bright
	jsr     _pal_bright
;
; while (bright != to)
;
	.dbg	line, "src\main.c", 67
L001E:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L001C
	cmp     _bright
	bne     L001C
;
; if (!bright)
;
	.dbg	line, "src\main.c", 75
	lda     _bright
	bne     L0029
;
; ppu_off();
;
	.dbg	line, "src\main.c", 77
	jsr     _ppu_off
;
; set_vram_update(NULL);
;
	.dbg	line, "src\main.c", 78
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; scroll(0,0);
;
	.dbg	line, "src\main.c", 79
	jsr     push0
	jsr     _scroll
;
; }
;
	.dbg	line, "src\main.c", 81
L0029:	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ titlePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_titlePhase: near

	.dbg	func, "titlePhase", "00", extern, "_titlePhase"

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "src/titlePhase.h", 18
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title);
;
	.dbg	line, "src/titlePhase.h", 19
	lda     #<(_title)
	ldx     #>(_title)
	jsr     _vram_unrle
;
; pal_bg(palette);
;
	.dbg	line, "src/titlePhase.h", 22
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; ppu_on_bg();
;
	.dbg	line, "src/titlePhase.h", 25
	jsr     _ppu_on_bg
;
; if (pad_trigger(0))
;
	.dbg	line, "src/titlePhase.h", 30
	lda     #$00
L02F0:	jsr     _pad_trigger
	tax
	beq     L02F0
;
; pal_fade_to(0);
;
	.dbg	line, "src/titlePhase.h", 37
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ gamePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gamePhase: near

	.dbg	func, "gamePhase", "00", extern, "_gamePhase"

.segment	"CODE"

;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 77
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "src/gamePhase.h", 80
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game);
;
	.dbg	line, "src/gamePhase.h", 81
	lda     #<(_game)
	ldx     #>(_game)
	jsr     _vram_unrle
;
; pal_bg(palette);
;
	.dbg	line, "src/gamePhase.h", 84
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette);
;
	.dbg	line, "src/gamePhase.h", 85
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_spr
;
; pal_bright(4);
;
	.dbg	line, "src/gamePhase.h", 88
	lda     #$04
	jsr     _pal_bright
;
; ppu_on_all();
;
	.dbg	line, "src/gamePhase.h", 89
	jsr     _ppu_on_all
;
; blockX = CENTER_X << FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 92
	ldx     #$08
	lda     #$00
	sta     _blockX
	stx     _blockX+1
;
; blockTileX = CENTER_X >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 93
	stx     _blockTileX
;
; blockTileY = BASE_Y >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 94
	lda     #$0D
	sta     _blockTileY
;
; blockSpeed = INIT_SPEED;
;
	.dbg	line, "src/gamePhase.h", 95
	lda     #$10
	sta     _blockSpeed
;
; blockCount = INIT_BLOCK_COUNT;
;
	.dbg	line, "src/gamePhase.h", 96
	lda     #$04
	sta     _blockCount
;
; direction = 1;
;
	.dbg	line, "src/gamePhase.h", 97
	lda     #$01
	sta     _direction
;
; stackHeight = 0;
;
	.dbg	line, "src/gamePhase.h", 98
	lda     #$00
	sta     _stackHeight
;
; isMoving = 1;
;
	.dbg	line, "src/gamePhase.h", 99
	lda     #$01
	sta     _isMoving
;
; prevStartX = 0;  // Left edge of playfield
;
	.dbg	line, "src/gamePhase.h", 100
	lda     #$00
	sta     _prevStartX
;
; prevBlockCount = BASE_BLOCK_WIDTH;
;
	.dbg	line, "src/gamePhase.h", 101
	lda     #$0E
	sta     _prevBlockCount
;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	.dbg	line, "src/gamePhase.h", 104
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     pushax
	lda     #<(_updateListData)
	ldx     #>(_updateListData)
	jsr     pushax
	ldx     #$00
	lda     #$17
	jsr     _memcpy
;
; set_vram_update(updateList);
;
	.dbg	line, "src/gamePhase.h", 105
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     _set_vram_update
;
; for (i = 0; i < blockCount; ++i)
;
	.dbg	line, "src/gamePhase.h", 110
L02FD:	lda     #$00
L02FE:	sta     _i
L02FF:	lda     _i
	cmp     _blockCount
	bcs     L0247
;
; oam_meta_spr((blockTileX + i) << TILE_SIZE_BIT,
;
	.dbg	line, "src/gamePhase.h", 112
	jsr     decsp3
	lda     _blockTileX
	clc
	adc     _i
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
;
; blockTileY << TILE_SIZE_BIT,
;
	.dbg	line, "src/gamePhase.h", 113
	lda     _blockTileY
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; i << 4,
;
	.dbg	line, "src/gamePhase.h", 114
	lda     _i
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; block_metasprite);
;
	.dbg	line, "src/gamePhase.h", 115
	lda     #<(_block_metasprite)
	ldx     #>(_block_metasprite)
	jsr     _oam_meta_spr
;
; for (i = 0; i < blockCount; ++i)
;
	.dbg	line, "src/gamePhase.h", 110
	inc     _i
	jmp     L02FF
;
; ppu_wait_frame();
;
	.dbg	line, "src/gamePhase.h", 119
L0247:	jsr     _ppu_wait_frame
;
; if (isMoving)
;
	.dbg	line, "src/gamePhase.h", 122
	lda     _isMoving
	beq     L0255
;
; if (direction)
;
	.dbg	line, "src/gamePhase.h", 125
	lda     _direction
	beq     L0257
;
; blockX += blockSpeed;
;
	.dbg	line, "src/gamePhase.h", 127
	lda     _blockSpeed
	clc
	adc     _blockX
	sta     _blockX
	lda     #$00
;
; else
;
	.dbg	line, "src/gamePhase.h", 129
	jmp     L030F
;
; blockX -= blockSpeed;
;
	.dbg	line, "src/gamePhase.h", 131
L0257:	lda     _blockSpeed
	eor     #$FF
	sec
	adc     _blockX
	sta     _blockX
	lda     #$FF
L030F:	adc     _blockX+1
	sta     _blockX+1
;
; blockTileX = blockX >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 135
L0255:	lda     _blockX+1
	sta     _blockTileX
;
; if ((((blockX & 0x00f0) >> FP_BITS)) >= 8)
;
	.dbg	line, "src/gamePhase.h", 136
	lda     _blockX
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$08
	bcc     L0261
;
; blockTileX += 1;
;
	.dbg	line, "src/gamePhase.h", 138
	inc     _blockTileX
;
; if ((blockX >> FP_BITS) <= SCREEN_MIN ||
;
	.dbg	line, "src/gamePhase.h", 142
L0261:	lda     _blockX
	ldx     _blockX+1
	jsr     shrax4
	cpx     #$00
	bne     L026B
	cmp     #$11
L026B:	bcc     L0269
;
; (blockX >> FP_BITS) >= (SCREEN_MAX - (blockCount << BLOCK_WIDTH_BIT)))
;
	.dbg	line, "src/gamePhase.h", 143
	lda     _blockX
	ldx     _blockX+1
	jsr     shrax4
	jsr     pushax
	lda     #$F0
	jsr     pusha0
	lda     _blockCount
	jsr     aslax4
	jsr     tossubax
	jsr     tosicmp
	bcc     L030D
;
; direction ^= 1;
;
	.dbg	line, "src/gamePhase.h", 146
L0269:	lda     _direction
	eor     #$01
	sta     _direction
;
; if (pad_trigger(0))
;
	.dbg	line, "src/gamePhase.h", 150
L030D:	lda     #$00
	jsr     _pad_trigger
	tax
	jeq     L02FE
;
; overlapStartX = MAX(blockTileX, prevStartX);
;
	.dbg	line, "src/gamePhase.h", 153
	ldx     #$00
	lda     _blockTileX
	cmp     _prevStartX
	bcs     L0301
	lda     _prevStartX
	jmp     L0303
L0301:	lda     _blockTileX
L0303:	sta     _overlapStartX
;
; overlapBlockCount = MIN(prevStartX + prevBlockCount - 1, blockTileX + blockCount - 1) - MAX(blockTileX, prevStartX) + 1;
;
	.dbg	line, "src/gamePhase.h", 154
	lda     _prevStartX
	clc
	adc     _prevBlockCount
	bcc     L02F2
	inx
L02F2:	sec
	sbc     #$01
	bcs     L0284
	dex
L0284:	jsr     pushax
	ldx     #$00
	lda     _blockTileX
	clc
	adc     _blockCount
	bcc     L02F3
	inx
L02F3:	sec
	sbc     #$01
	bcs     L0286
	dex
L0286:	jsr     tosicmp
	bcs     L0287
	ldx     #$00
	lda     _prevStartX
	clc
	adc     _prevBlockCount
	jmp     L0312
L0287:	ldx     #$00
	lda     _blockTileX
	clc
	adc     _blockCount
L0312:	bcc     L02F5
	inx
L02F5:	sec
	sbc     #$01
	bcs     L028E
	dex
L028E:	jsr     pushax
	lda     _blockTileX
	cmp     _prevStartX
	bcs     L0304
	lda     _prevStartX
	jmp     L0305
L0304:	lda     _blockTileX
L0305:	jsr     tossuba0
	clc
	adc     #$01
	sta     _overlapBlockCount
;
; if (overlapBlockCount == 0 || overlapBlockCount > BASE_BLOCK_WIDTH)
;
	.dbg	line, "src/gamePhase.h", 157
	ldx     #$00
	lda     _overlapBlockCount
	bne     L0313
;
; pal_fade_to(0);
;
	.dbg	line, "src/gamePhase.h", 204
	jmp     _pal_fade_to
;
; if (overlapBlockCount == 0 || overlapBlockCount > BASE_BLOCK_WIDTH)
;
	.dbg	line, "src/gamePhase.h", 157
L0313:	cmp     #$0F
	jcs     L030A
;
; prevStartX = overlapStartX;
;
	.dbg	line, "src/gamePhase.h", 163
	lda     _overlapStartX
	sta     _prevStartX
;
; prevBlockCount = overlapBlockCount;
;
	.dbg	line, "src/gamePhase.h", 164
	lda     _overlapBlockCount
	sta     _prevBlockCount
;
; i16 = NTADR_A(overlapStartX << 1, (blockTileY - 1) << 1);
;
	.dbg	line, "src/gamePhase.h", 169
	lda     _blockTileY
	sec
	sbc     #$01
	bcs     L02A7
	dex
L02A7:	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _overlapStartX
	asl     a
	bcc     L02F6
	inx
L02F6:	ora     ptr1
	sta     _i16
	txa
	ora     tmp1
	ora     #$20
	sta     _i16+1
;
; updateList[0] = MSB(i16) | NT_UPD_HORZ;
;
	.dbg	line, "src/gamePhase.h", 170
	ora     #$40
	sta     _updateList
;
; updateList[1] = LSB(i16);
;
	.dbg	line, "src/gamePhase.h", 171
	lda     _i16
	sta     _updateList+1
;
; i16 += 32;
;
	.dbg	line, "src/gamePhase.h", 172
	lda     #$20
	clc
	adc     _i16
	sta     _i16
	bcc     L02B7
	inc     _i16+1
;
; updateList[11] = MSB(i16) | NT_UPD_HORZ;
;
	.dbg	line, "src/gamePhase.h", 173
L02B7:	lda     _i16+1
	ora     #$40
	sta     _updateList+11
;
; updateList[12] = LSB(i16);
;
	.dbg	line, "src/gamePhase.h", 174
	lda     _i16
	sta     _updateList+12
;
; for (i = overlapBlockCount<<1; i < INIT_BLOCK_COUNT<<1; ++i)
;
	.dbg	line, "src/gamePhase.h", 176
	lda     _overlapBlockCount
	asl     a
	sta     _i
L0308:	lda     _i
	cmp     #$08
	bcs     L0309
;
; updateList[UPPER_START + i] = 0x00;
;
	.dbg	line, "src/gamePhase.h", 178
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L02FB
	inx
	clc
L02FB:	adc     #<(_updateList)
	sta     ptr1
	txa
	adc     #>(_updateList)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; updateList[LOWER_START + i] = 0x00;
;
	.dbg	line, "src/gamePhase.h", 179
	tax
	lda     _i
	clc
	adc     #$0E
	bcc     L02FC
	inx
	clc
L02FC:	adc     #<(_updateList)
	sta     ptr1
	txa
	adc     #>(_updateList)
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; for (i = overlapBlockCount<<1; i < INIT_BLOCK_COUNT<<1; ++i)
;
	.dbg	line, "src/gamePhase.h", 176
	inc     _i
	jmp     L0308
;
; ++stackHeight;
;
	.dbg	line, "src/gamePhase.h", 183
L0309:	inc     _stackHeight
;
; if (stackHeight >= WIN_STACK_HEIGHT)
;
	.dbg	line, "src/gamePhase.h", 184
	lda     _stackHeight
	cmp     #$0A
	lda     #$00
	tax
;
; break;
;
	.dbg	line, "src/gamePhase.h", 186
	bcs     L030B
;
; blockX = CENTER_X << FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 192
	ldx     #$08
	sta     _blockX
	stx     _blockX+1
;
; blockTileX = CENTER_X >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 193
	stx     _blockTileX
;
; blockTileY -= 1;
;
	.dbg	line, "src/gamePhase.h", 194
	dec     _blockTileY
;
; blockCount = overlapBlockCount;   
;
	.dbg	line, "src/gamePhase.h", 195
	lda     _overlapBlockCount
	sta     _blockCount
;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 196
	jsr     _oam_clear
;
; blockSpeed += INCREMENT_SPEED;
;
	.dbg	line, "src/gamePhase.h", 199
	lda     #$00
	clc
	adc     _blockSpeed
	sta     _blockSpeed
;
; while (1)
;
	.dbg	line, "src/gamePhase.h", 107
	jmp     L02FD
;
; pal_fade_to(0);
;
	.dbg	line, "src/gamePhase.h", 204
L030A:	txa
L030B:	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; titlePhase();
;
	.dbg	line, "src\main.c", 92
L02E5:	jsr     _titlePhase
;
; pal_fade_to(0);
;
	.dbg	line, "src\main.c", 94
	ldx     #$00
	txa
	jsr     _pal_fade_to
;
; gamePhase();
;
	.dbg	line, "src\main.c", 96
	jsr     _gamePhase
;
; while (1) // Infinite loop
;
	.dbg	line, "src\main.c", 90
	jmp     L02E5
	.dbg	line

.endproc


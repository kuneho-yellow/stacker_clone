;
; File generated by cc65 v 2.16 - Git e7137a2
;
	.fopt		compiler,"cc65 v 2.16 - Git e7137a2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "src\main.c", 2021, 1511789777
	.dbg		file, "src/lib/neslib.h", 8355, 1511504897
	.dbg		file, "src/soundsAndMusic/soundsAndMusic.h", 735, 1511504897
	.dbg		file, "src/gameConstants.h", 587, 1511789743
	.dbg		file, "src/titlePhase.h", 1052, 1511789773
	.dbg		file, "src/nametables/title.h", 1589, 1511778076
	.dbg		file, "src/gamePhase.h", 6916, 1511789768
	.dbg		file, "src/nametables/game.h", 594, 1511786241
	.dbg		file, "src/resultPhase.h", 2388, 1511789230
	.dbg		file, "src/nametables/hud.h", 351, 1511781635
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_col", "00", extern, "_pal_col"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "ppu_on_bg", "00", extern, "_ppu_on_bg"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "pad_trigger", "00", extern, "_pad_trigger"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_bg", "00", extern, "_bank_bg"
	.dbg		sym, "rand8", "00", extern, "_rand8"
	.dbg		sym, "set_rand", "00", extern, "_set_rand"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_pad_trigger
	.import		_scroll
	.import		_bank_bg
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_write
	.import		_vram_unrle
	.import		_memcpy
	.import		_delay
	.export		_palette
	.export		_pal_fade_to
	.export		_title_nam
	.export		_titlePhase
	.export		_game_nam
	.export		_block_metasprite
	.export		_updateListData
	.export		_gamePhase
	.export		_fail_nam1
	.export		_fail_nam2
	.export		_fail_nam3
	.export		_resultPhase
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"DATA"

.segment	"RODATA"

_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$37
_title_nam:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C2
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$8C
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$04
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$8C
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$96
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$2F
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$22
	.byte	$39
	.byte	$00
	.byte	$2C
	.byte	$2F
	.byte	$32
	.byte	$29
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$1E
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$32
	.byte	$25
	.byte	$33
	.byte	$33
	.byte	$12
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$01
	.byte	$0F
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$85
	.byte	$A5
	.byte	$A5
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0C
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00
_game_nam:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$81
	.byte	$4D
	.byte	$4E
	.byte	$49
	.byte	$4A
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$27
	.byte	$2F
	.byte	$21
	.byte	$2C
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$49
	.byte	$4A
	.byte	$4D
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$4B
	.byte	$4C
	.byte	$0D
	.byte	$02
	.byte	$13
	.byte	$4B
	.byte	$4C
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$85
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$44
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$48
	.byte	$5A
	.byte	$02
	.byte	$05
	.byte	$12
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$C4
	.byte	$F5
	.byte	$02
	.byte	$05
	.byte	$31
	.byte	$0C
	.byte	$0F
	.byte	$02
	.byte	$05
	.byte	$03
	.byte	$02
	.byte	$00
_block_metasprite:
	.byte	$00
	.byte	$EF
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$EF
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$F7
	.byte	$42
	.byte	$01
	.byte	$08
	.byte	$F7
	.byte	$43
	.byte	$01
	.byte	$80
_updateListData:
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$FF
_fail_nam1:
	.byte	$63
	.byte	$68
	.byte	$60
	.byte	$62
	.byte	$60
	.byte	$62
	.byte	$60
	.byte	$62
	.byte	$60
	.byte	$62
	.byte	$60
	.byte	$62
	.byte	$97
	.byte	$97
_fail_nam2:
	.byte	$84
	.byte	$85
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$68
	.byte	$98
	.byte	$98
_fail_nam3:
	.byte	$67
	.byte	$68
	.byte	$6F
	.byte	$74
	.byte	$6F
	.byte	$74
	.byte	$6F
	.byte	$74
	.byte	$6F
	.byte	$74
	.byte	$6F
	.byte	$74
	.byte	$99
	.byte	$99

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_frameCounter:
	.res	1,$00
_gameResult:
	.res	1,$00
_var16Bit:
	.res	2,$00
_bright:
	.res	1,$00
.segment	"BSS"
_updateList:
	.res	23,$00
_blockPosX:
	.res	2,$00
_blockCoordX:
	.res	1,$00
_blockCoordY:
	.res	1,$00
_blockSpeed:
	.res	1,$00
_blockSize:
	.res	1,$00
_blockWidth:
	.res	1,$00
_stackHeight:
	.res	1,$00
_isMoveRight:
	.res	1,$00
_minStackCoordX:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ pal_fade_to (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pal_fade_to: near

	.dbg	func, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg	sym, "to", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "src\main.c", 43
	jsr     pushax
;
; if (!to) music_stop();
;
	.dbg	line, "src\main.c", 44
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L001E
	jsr     _music_stop
;
; while (bright != to)
;
	.dbg	line, "src\main.c", 46
	jmp     L001E
;
; delay(4);
;
	.dbg	line, "src\main.c", 48
L001C:	lda     #$04
	jsr     _delay
;
; if (bright<to)  ++bright;
;
	.dbg	line, "src\main.c", 49
	ldx     #$00
	lda     _bright
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L03C5
	inc     _bright
;
; else    --bright;
;
	.dbg	line, "src\main.c", 50
	jmp     L03C4
L03C5:	dec     _bright
;
; pal_bright(bright);
;
	.dbg	line, "src\main.c", 51
L03C4:	lda     _bright
	jsr     _pal_bright
;
; while (bright != to)
;
	.dbg	line, "src\main.c", 46
L001E:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L001C
	cmp     _bright
	bne     L001C
;
; if (!bright)
;
	.dbg	line, "src\main.c", 54
	lda     _bright
	bne     L0029
;
; ppu_off();
;
	.dbg	line, "src\main.c", 56
	jsr     _ppu_off
;
; set_vram_update(NULL);
;
	.dbg	line, "src\main.c", 57
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; scroll(0,0);
;
	.dbg	line, "src\main.c", 58
	jsr     push0
	jsr     _scroll
;
; }
;
	.dbg	line, "src\main.c", 60
L0029:	jmp     incsp2
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ titlePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_titlePhase: near

	.dbg	func, "titlePhase", "00", extern, "_titlePhase"

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "src/titlePhase.h", 18
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_nam);
;
	.dbg	line, "src/titlePhase.h", 19
	lda     #<(_title_nam)
	ldx     #>(_title_nam)
	jsr     _vram_unrle
;
; pal_bg(palette);
;
	.dbg	line, "src/titlePhase.h", 22
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; ppu_on_bg();
;
	.dbg	line, "src/titlePhase.h", 25
	jsr     _ppu_on_bg
;
; ppu_wait_frame();
;
	.dbg	line, "src/titlePhase.h", 29
L0168:	jsr     _ppu_wait_frame
;
; ++frameCounter;
;
	.dbg	line, "src/titlePhase.h", 30
	inc     _frameCounter
;
; pal_col(12, (frameCounter & 16) ? 0x0f : 0x0f);
;
	.dbg	line, "src/titlePhase.h", 33
	lda     #$0C
	jsr     pusha
	lda     _frameCounter
	and     #$10
	lda     #$0F
	jsr     _pal_col
;
; pal_col(13, (frameCounter & 16) ? 0x16 : 0x15);
;
	.dbg	line, "src/titlePhase.h", 34
	lda     #$0D
	jsr     pusha
	lda     _frameCounter
	and     #$10
	beq     L03C7
	lda     #$16
	jmp     L03C8
L03C7:	lda     #$15
L03C8:	jsr     _pal_col
;
; pal_col(14, (frameCounter & 16) ? 0x27 : 0x25);
;
	.dbg	line, "src/titlePhase.h", 35
	lda     #$0E
	jsr     pusha
	lda     _frameCounter
	and     #$10
	beq     L03C9
	lda     #$27
	jmp     L03CA
L03C9:	lda     #$25
L03CA:	jsr     _pal_col
;
; pal_col(15, (frameCounter & 16) ? 0x37 : 0x35);
;
	.dbg	line, "src/titlePhase.h", 36
	lda     #$0F
	jsr     pusha
	lda     _frameCounter
	and     #$10
	beq     L03CB
	lda     #$37
	jmp     L03CC
L03CB:	lda     #$35
L03CC:	jsr     _pal_col
;
; if (pad_trigger(0))
;
	.dbg	line, "src/titlePhase.h", 39
	lda     #$00
	jsr     _pad_trigger
	tax
	beq     L0168
;
; pal_fade_to(0);
;
	.dbg	line, "src/titlePhase.h", 46
	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ gamePhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gamePhase: near

	.dbg	func, "gamePhase", "00", extern, "_gamePhase"

.segment	"CODE"

;
; set_rand(frameCounter);
;
	.dbg	line, "src/gamePhase.h", 73
	lda     _frameCounter
	ldx     #$00
	jsr     _set_rand
;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 76
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "src/gamePhase.h", 79
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(game_nam);
;
	.dbg	line, "src/gamePhase.h", 80
	lda     #<(_game_nam)
	ldx     #>(_game_nam)
	jsr     _vram_unrle
;
; pal_bg(palette);
;
	.dbg	line, "src/gamePhase.h", 83
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette);
;
	.dbg	line, "src/gamePhase.h", 84
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_spr
;
; pal_bright(4);
;
	.dbg	line, "src/gamePhase.h", 87
	lda     #$04
	jsr     _pal_bright
;
; ppu_on_all();
;
	.dbg	line, "src/gamePhase.h", 88
	jsr     _ppu_on_all
;
; gameResult = 0;
;
	.dbg	line, "src/gamePhase.h", 91
	lda     #$00
	sta     _gameResult
;
; blockSpeed = INIT_SPEED;
;
	.dbg	line, "src/gamePhase.h", 92
	lda     #$18
	sta     _blockSpeed
;
; blockSize = INIT_BLOCK_SIZE;
;
	.dbg	line, "src/gamePhase.h", 93
	lda     #$04
	sta     _blockSize
;
; blockWidth = BLOCK_SIDE * blockSize;
;
	.dbg	line, "src/gamePhase.h", 94
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _blockWidth
;
; blockPosX = CENTER_X << FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 95
	ldx     #$07
	lda     #$00
	sta     _blockPosX
	stx     _blockPosX+1
;
; blockCoordX = CENTER_X >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 96
	stx     _blockCoordX
;
; blockCoordY = BASE_Y >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 97
	lda     #$0D
	sta     _blockCoordY
;
; stackHeight = 0;
;
	.dbg	line, "src/gamePhase.h", 98
	lda     #$00
	sta     _stackHeight
;
; isMoveRight = 1;
;
	.dbg	line, "src/gamePhase.h", 99
	lda     #$01
	sta     _isMoveRight
;
; minStackCoordX = 0;
;
	.dbg	line, "src/gamePhase.h", 100
	lda     #$00
	sta     _minStackCoordX
;
; memcpy(updateList, updateListData, sizeof(updateListData));
;
	.dbg	line, "src/gamePhase.h", 103
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     pushax
	lda     #<(_updateListData)
	ldx     #>(_updateListData)
	jsr     pushax
	ldx     #$00
	lda     #$17
	jsr     _memcpy
;
; set_vram_update(updateList);
;
	.dbg	line, "src/gamePhase.h", 104
	lda     #<(_updateList)
	ldx     #>(_updateList)
	jsr     _set_vram_update
;
; music_play(MUSIC_GAME);
;
	.dbg	line, "src/gamePhase.h", 107
	lda     #$01
	jsr     _music_play
;
; for (i = 0; i < blockSize; ++i)
;
	.dbg	line, "src/gamePhase.h", 112
L03DA:	lda     #$00
L03DB:	sta     _i
L03DC:	lda     _i
	cmp     _blockSize
	bcs     L0269
;
; oam_meta_spr((blockCoordX + i) << TILE_SIZE_BIT,
;
	.dbg	line, "src/gamePhase.h", 114
	jsr     decsp3
	lda     _blockCoordX
	clc
	adc     _i
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
;
; blockCoordY << TILE_SIZE_BIT,
;
	.dbg	line, "src/gamePhase.h", 115
	lda     _blockCoordY
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; i << 4,
;
	.dbg	line, "src/gamePhase.h", 116
	lda     _i
	asl     a
	asl     a
	asl     a
	asl     a
	dey
	sta     (sp),y
;
; block_metasprite);
;
	.dbg	line, "src/gamePhase.h", 117
	lda     #<(_block_metasprite)
	ldx     #>(_block_metasprite)
	jsr     _oam_meta_spr
;
; for (i = 0; i < blockSize; ++i)
;
	.dbg	line, "src/gamePhase.h", 112
	inc     _i
	jmp     L03DC
;
; ppu_wait_frame();
;
	.dbg	line, "src/gamePhase.h", 121
L0269:	jsr     _ppu_wait_frame
;
; ++frameCounter;
;
	.dbg	line, "src/gamePhase.h", 122
	inc     _frameCounter
;
; bank_bg((frameCounter >> 4)&1);
;
	.dbg	line, "src/gamePhase.h", 125
	lda     _frameCounter
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_bg
;
; if (isMoveRight)
;
	.dbg	line, "src/gamePhase.h", 128
	lda     _isMoveRight
	beq     L027B
;
; blockPosX += blockSpeed;
;
	.dbg	line, "src/gamePhase.h", 130
	lda     _blockSpeed
	clc
	adc     _blockPosX
	sta     _blockPosX
	lda     #$00
;
; else
;
	.dbg	line, "src/gamePhase.h", 132
	jmp     L03ED
;
; blockPosX -= blockSpeed;
;
	.dbg	line, "src/gamePhase.h", 134
L027B:	lda     _blockSpeed
	eor     #$FF
	sec
	adc     _blockPosX
	sta     _blockPosX
	lda     #$FF
L03ED:	adc     _blockPosX+1
	sta     _blockPosX+1
;
; blockCoordX = blockPosX >> TILE_PLUS_FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 139
	sta     _blockCoordX
;
; if ((((blockPosX & 0x00f0) >> FP_BITS)) >= 8)
;
	.dbg	line, "src/gamePhase.h", 141
	lda     _blockPosX
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$08
	bcc     L0285
;
; blockCoordX += 1;
;
	.dbg	line, "src/gamePhase.h", 143
	inc     _blockCoordX
;
; if ((blockPosX >> FP_BITS) <= SCREEN_MIN ||
;
	.dbg	line, "src/gamePhase.h", 147
L0285:	lda     _blockPosX
	ldx     _blockPosX+1
	jsr     shrax4
	cpx     #$00
	bne     L028F
	cmp     #$11
L028F:	bcc     L028D
;
; (blockPosX >> FP_BITS) >= (SCREEN_MAX - blockWidth))
;
	.dbg	line, "src/gamePhase.h", 148
	lda     _blockPosX
	ldx     _blockPosX+1
	jsr     shrax4
	jsr     pushax
	lda     #$F0
	sec
	sbc     _blockWidth
	jsr     tosicmp0
	bcc     L03EB
;
; isMoveRight ^= 1;
;
	.dbg	line, "src/gamePhase.h", 151
L028D:	lda     _isMoveRight
	eor     #$01
	sta     _isMoveRight
;
; if (pad_trigger(0))
;
	.dbg	line, "src/gamePhase.h", 155
L03EB:	lda     #$00
	jsr     _pad_trigger
	tax
	jeq     L03DB
;
; if (stackHeight < 1)
;
	.dbg	line, "src/gamePhase.h", 158
	ldx     #$00
	lda     _stackHeight
	bne     L03DE
;
; minStackCoordX = blockCoordX;
;
	.dbg	line, "src/gamePhase.h", 160
	lda     _blockCoordX
	sta     _minStackCoordX
;
; if (blockCoordX != minStackCoordX)
;
	.dbg	line, "src/gamePhase.h", 166
L03DE:	lda     _minStackCoordX
	cmp     _blockCoordX
	jeq     L03E6
;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 169
	jsr     _oam_clear
;
; j = (blockCoordX < minStackCoordX) ?
;
	.dbg	line, "src/gamePhase.h", 172
	ldx     #$00
	lda     _blockCoordX
	cmp     _minStackCoordX
;
; (minStackCoordX - blockCoordX): // Extra blocks to the left
;
	.dbg	line, "src/gamePhase.h", 173
	bcs     L03DF
	lda     _minStackCoordX
	sec
	sbc     _blockCoordX
;
; (blockCoordX - minStackCoordX); // Extra blocks to the right
;
	.dbg	line, "src/gamePhase.h", 174
	jmp     L03EE
L03DF:	lda     _blockCoordX
	sec
	sbc     _minStackCoordX
L03EE:	sta     _j
;
; if (j > blockSize)
;
	.dbg	line, "src/gamePhase.h", 175
	sec
	sbc     _blockSize
	bcc     L03E0
	beq     L03E0
;
; j = blockSize;
;
	.dbg	line, "src/gamePhase.h", 177
	lda     _blockSize
	sta     _j
;
; if (blockSize != j)
;
	.dbg	line, "src/gamePhase.h", 182
L03E0:	lda     _j
	cmp     _blockSize
	beq     L03E2
;
; for (i = 0; i < (j << 1); ++i)
;
	.dbg	line, "src/gamePhase.h", 186
	stx     _i
L03E1:	lda     _i
	jsr     pusha0
	lda     _j
	asl     a
	bcc     L03CE
	ldx     #$01
L03CE:	jsr     tosicmp
	bcs     L02B0
;
; updateList[2 + (blockSize << 1) - i] = TILE_EMPTY;
;
	.dbg	line, "src/gamePhase.h", 188
	ldx     #$00
	lda     _blockSize
	asl     a
	bcc     L03D8
	inx
	clc
L03D8:	adc     #$02
	bcc     L02BB
	inx
L02BB:	sec
	sbc     _i
	pha
	txa
	sbc     #$00
	tax
	pla
	clc
	adc     #<(_updateList)
	sta     ptr1
	txa
	adc     #>(_updateList)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; updateList[13 + (blockSize << 1) - i] = TILE_EMPTY;
;
	.dbg	line, "src/gamePhase.h", 189
	tax
	lda     _blockSize
	asl     a
	bcc     L03D9
	inx
	clc
L03D9:	adc     #$0D
	bcc     L02C0
	inx
L02C0:	sec
	sbc     _i
	pha
	txa
	sbc     #$00
	tax
	pla
	clc
	adc     #<(_updateList)
	sta     ptr1
	txa
	adc     #>(_updateList)
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; for (i = 0; i < (j << 1); ++i)
;
	.dbg	line, "src/gamePhase.h", 186
	inc     _i
	jmp     L03E1
;
; if (blockCoordX > minStackCoordX ||
;
	.dbg	line, "src/gamePhase.h", 194
L02B0:	ldx     #$00
L03E2:	lda     _blockCoordX
	sec
	sbc     _minStackCoordX
	sta     tmp1
	lda     tmp1
	beq     L03E3
	bcs     L03E4
;
; blockSize == j) // Added to show how player loses
;
	.dbg	line, "src/gamePhase.h", 195
L03E3:	lda     _j
	cmp     _blockSize
	bne     L03E5
;
; minStackCoordX = blockCoordX;
;
	.dbg	line, "src/gamePhase.h", 197
L03E4:	lda     _blockCoordX
	sta     _minStackCoordX
;
; blockSize -= j;
;
	.dbg	line, "src/gamePhase.h", 201
L03E5:	lda     _j
	eor     #$FF
	sec
	adc     _blockSize
	sta     _blockSize
;
; blockWidth = BLOCK_SIDE * blockSize;
;
	.dbg	line, "src/gamePhase.h", 202
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _blockWidth
;
; var16Bit = NTADR_A(minStackCoordX << 1, (blockCoordY - 1) << 1);
;
	.dbg	line, "src/gamePhase.h", 209
L03E6:	lda     _blockCoordY
	sec
	sbc     #$01
	bcs     L02D2
	dex
L02D2:	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _minStackCoordX
	asl     a
	bcc     L03D1
	inx
L03D1:	ora     ptr1
	sta     _var16Bit
	txa
	ora     tmp1
	ora     #$20
	sta     _var16Bit+1
;
; updateList[0] = MSB(var16Bit) | NT_UPD_HORZ;
;
	.dbg	line, "src/gamePhase.h", 210
	ora     #$40
	sta     _updateList
;
; updateList[1] = LSB(var16Bit);
;
	.dbg	line, "src/gamePhase.h", 211
	lda     _var16Bit
	sta     _updateList+1
;
; var16Bit += 32;
;
	.dbg	line, "src/gamePhase.h", 212
	lda     #$20
	clc
	adc     _var16Bit
	sta     _var16Bit
	bcc     L02E2
	inc     _var16Bit+1
;
; updateList[11] = MSB(var16Bit) | NT_UPD_HORZ;
;
	.dbg	line, "src/gamePhase.h", 213
L02E2:	lda     _var16Bit+1
	ora     #$40
	sta     _updateList+11
;
; updateList[12] = LSB(var16Bit);
;
	.dbg	line, "src/gamePhase.h", 214
	lda     _var16Bit
	sta     _updateList+12
;
; if (blockSize == 0)
;
	.dbg	line, "src/gamePhase.h", 217
	lda     _blockSize
	bne     L03E7
;
; gameResult = 0;
;
	.dbg	line, "src/gamePhase.h", 219
	sta     _gameResult
;
; break;
;
	.dbg	line, "src/gamePhase.h", 220
	jmp     L0265
;
; ++stackHeight;
;
	.dbg	line, "src/gamePhase.h", 224
L03E7:	inc     _stackHeight
;
; if (stackHeight >= WIN_STACK_HEIGHT)
;
	.dbg	line, "src/gamePhase.h", 225
	lda     _stackHeight
	cmp     #$0A
	bcc     L02F4
;
; gameResult = 1;
;
	.dbg	line, "src/gamePhase.h", 227
	lda     #$01
	sta     _gameResult
;
; break;
;
	.dbg	line, "src/gamePhase.h", 228
	jmp     L03E9
;
; blockPosX = CENTER_X << FP_BITS;
;
	.dbg	line, "src/gamePhase.h", 232
L02F4:	ldx     #$07
	lda     #$00
	sta     _blockPosX
	stx     _blockPosX+1
;
; blockCoordX = CENTER_X >> TILE_SIZE_BIT;
;
	.dbg	line, "src/gamePhase.h", 233
	stx     _blockCoordX
;
; blockCoordY -= 1;
;
	.dbg	line, "src/gamePhase.h", 234
	dec     _blockCoordY
;
; isMoveRight = (rand8() < 128) ? 0 : 1;
;
	.dbg	line, "src/gamePhase.h", 236
	jsr     _rand8
	cmp     #$80
	bcs     L0303
	lda     #$00
	jmp     L03E8
L0303:	lda     #$01
L03E8:	sta     _isMoveRight
;
; blockSpeed += INCREMENT_SPEED;
;
	.dbg	line, "src/gamePhase.h", 239
	lda     #$04
	clc
	adc     _blockSpeed
	sta     _blockSpeed
;
; while (1)
;
	.dbg	line, "src/gamePhase.h", 109
	jmp     L03DA
;
; delay(1);
;
	.dbg	line, "src/gamePhase.h", 244
L0265:	lda     #$01
L03E9:	jsr     _delay
;
; oam_clear();
;
	.dbg	line, "src/gamePhase.h", 245
	jsr     _oam_clear
;
; set_vram_update(NULL);
;
	.dbg	line, "src/gamePhase.h", 248
	ldx     #$00
	txa
	jmp     _set_vram_update
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ resultPhase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resultPhase: near

	.dbg	func, "resultPhase", "00", extern, "_resultPhase"

.segment	"CODE"

;
; if (!gameResult)
;
	.dbg	line, "src/resultPhase.h", 21
	lda     _gameResult
	jne     L033C
;
; ppu_off();
;
	.dbg	line, "src/resultPhase.h", 24
	jsr     _ppu_off
;
; vram_adr(0x2189);
;
	.dbg	line, "src/resultPhase.h", 27
	ldx     #$21
	lda     #$89
	jsr     _vram_adr
;
; vram_write((unsigned char*)fail_nam1, 14);
;
	.dbg	line, "src/resultPhase.h", 28
	lda     #<(_fail_nam1)
	ldx     #>(_fail_nam1)
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _vram_write
;
; vram_adr(0x21a9);
;
	.dbg	line, "src/resultPhase.h", 29
	ldx     #$21
	lda     #$A9
	jsr     _vram_adr
;
; vram_write((unsigned char*)fail_nam2, 14);
;
	.dbg	line, "src/resultPhase.h", 30
	lda     #<(_fail_nam2)
	ldx     #>(_fail_nam2)
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _vram_write
;
; vram_adr(0x21c9);
;
	.dbg	line, "src/resultPhase.h", 31
	ldx     #$21
	lda     #$C9
	jsr     _vram_adr
;
; vram_write((unsigned char*)fail_nam3, 14);
;
	.dbg	line, "src/resultPhase.h", 32
	lda     #<(_fail_nam3)
	ldx     #>(_fail_nam3)
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _vram_write
;
; pal_col(4, 0x0f);
;
	.dbg	line, "src/resultPhase.h", 35
	lda     #$04
	jsr     pusha
	lda     #$0F
	jsr     _pal_col
;
; pal_col(5, 0x16);
;
	.dbg	line, "src/resultPhase.h", 36
	lda     #$05
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; pal_col(6, 0x27);
;
	.dbg	line, "src/resultPhase.h", 37
	lda     #$06
	jsr     pusha
	lda     #$27
	jsr     _pal_col
;
; pal_col(7, 0x37);
;
	.dbg	line, "src/resultPhase.h", 38
	lda     #$07
	jsr     pusha
	lda     #$37
	jsr     _pal_col
;
; ppu_wait_frame();
;
	.dbg	line, "src/resultPhase.h", 41
	jsr     _ppu_wait_frame
;
; ppu_on_all();
;
	.dbg	line, "src/resultPhase.h", 42
	jsr     _ppu_on_all
;
; music_play(MUSIC_LOSE);
;
	.dbg	line, "src/resultPhase.h", 45
	lda     #$05
	jsr     _music_play
;
; ppu_wait_frame();
;
	.dbg	line, "src/resultPhase.h", 51
L035E:	jsr     _ppu_wait_frame
;
; ++frameCounter;
;
	.dbg	line, "src/resultPhase.h", 52
	inc     _frameCounter
;
; bank_bg((frameCounter >> 4)&1);
;
	.dbg	line, "src/resultPhase.h", 55
	lda     _frameCounter
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_bg
;
; if (pad_trigger(0))
;
	.dbg	line, "src/resultPhase.h", 57
	lda     #$00
	jsr     _pad_trigger
	tax
	beq     L035E
;
; break;
;
	.dbg	line, "src/resultPhase.h", 59
	jmp     L036E
;
; music_play(MUSIC_WELL_DONE);
;
	.dbg	line, "src/resultPhase.h", 67
L033C:	lda     #$04
	jsr     _music_play
;
; ppu_wait_frame();
;
	.dbg	line, "src/resultPhase.h", 72
L036D:	jsr     _ppu_wait_frame
;
; ++frameCounter;
;
	.dbg	line, "src/resultPhase.h", 73
	inc     _frameCounter
;
; pal_col(8, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x0f : 0x0f);
;
	.dbg	line, "src/resultPhase.h", 76
	lda     #$08
	jsr     pusha
	lda     _frameCounter
	and     #$08
	lda     #$0F
	jsr     _pal_col
;
; pal_col(9, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x15 : 0x16);
;
	.dbg	line, "src/resultPhase.h", 77
	lda     #$09
	jsr     pusha
	lda     _frameCounter
	and     #$08
	beq     L03F1
	lda     #$15
	jmp     L03F2
L03F1:	lda     #$16
L03F2:	jsr     _pal_col
;
; pal_col(10, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x25 : 0x27);
;
	.dbg	line, "src/resultPhase.h", 78
	lda     #$0A
	jsr     pusha
	lda     _frameCounter
	and     #$08
	beq     L03F3
	lda     #$25
	jmp     L03F4
L03F3:	lda     #$27
L03F4:	jsr     _pal_col
;
; pal_col(11, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x35 : 0x37);
;
	.dbg	line, "src/resultPhase.h", 79
	lda     #$0B
	jsr     pusha
	lda     _frameCounter
	and     #$08
	beq     L03F5
	lda     #$35
	jmp     L03F6
L03F5:	lda     #$37
L03F6:	jsr     _pal_col
;
; pal_col(4, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x0f : 0x0f);
;
	.dbg	line, "src/resultPhase.h", 82
	lda     #$04
	jsr     pusha
	lda     _frameCounter
	and     #$08
	lda     #$0F
	jsr     _pal_col
;
; pal_col(5, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x11 : 0x16);
;
	.dbg	line, "src/resultPhase.h", 83
	lda     #$05
	jsr     pusha
	lda     _frameCounter
	and     #$08
	beq     L03F7
	lda     #$11
	jmp     L03F8
L03F7:	lda     #$16
L03F8:	jsr     _pal_col
;
; pal_col(6, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x21 : 0x27);
;
	.dbg	line, "src/resultPhase.h", 84
	lda     #$06
	jsr     pusha
	lda     _frameCounter
	and     #$08
	beq     L03F9
	lda     #$21
	jmp     L03FA
L03F9:	lda     #$27
L03FA:	jsr     _pal_col
;
; pal_col(7, (frameCounter & COLOR_SWAP_FRAME_BIT) ? 0x31 : 0x37);
;
	.dbg	line, "src/resultPhase.h", 85
	lda     #$07
	jsr     pusha
	lda     _frameCounter
	and     #$08
	beq     L03FB
	lda     #$31
	jmp     L03FC
L03FB:	lda     #$37
L03FC:	jsr     _pal_col
;
; bank_bg((frameCounter >> 2)&1);
;
	.dbg	line, "src/resultPhase.h", 88
	lda     _frameCounter
	lsr     a
	lsr     a
	and     #$01
	jsr     _bank_bg
;
; if (pad_trigger(0))
;
	.dbg	line, "src/resultPhase.h", 91
	lda     #$00
	jsr     _pad_trigger
	tax
	jeq     L036D
;
; pal_fade_to(0);
;
	.dbg	line, "src/resultPhase.h", 99
L036E:	ldx     #$00
	txa
	jmp     _pal_fade_to
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; titlePhase();
;
	.dbg	line, "src\main.c", 73
L03BC:	jsr     _titlePhase
;
; gamePhase();  
;
	.dbg	line, "src\main.c", 74
	jsr     _gamePhase
;
; resultPhase();
;
	.dbg	line, "src\main.c", 75
	jsr     _resultPhase
;
; while (1)
;
	.dbg	line, "src\main.c", 71
	jmp     L03BC
	.dbg	line

.endproc

